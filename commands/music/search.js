const { ApplicationCommandOptionType, EmbedBuilder } = require('discord.js');
const { QueryType } = require('discord-player');

module.exports = {
    name: 'search',
    description: 'search a track',
    voiceChannel: true,
    options: [
        {
            name: 'song',
            description: 'the song you want to search',
            type: ApplicationCommandOptionType.String,
            required: true,
        }
    ],

    async execute({ client, inter }) {
        const song = inter.options.getString('song');

        const res = await player.search(song, {
            requestedBy: inter.member,
            searchEngine: QueryType.AUTO
        });

         if (!queue || !queue.playing) return inter.reply({ content: `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è ${inter.member}... –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É ? ‚ùå`, ephemeral: true });

        const queue = await player.createQueue(inter.guild, {
            metadata: inter.channel,
            leaveOnEnd: client.config.opt.leaveOnEnd,
        });
        const maxTracks = res.tracks.slice(0, 10);

        const embed = new EmbedBuilder()
        .setColor('#ff0000')
        .setAuthor({ name: `Results for ${song}`, iconURL: client.user.displayAvatarURL({ size: 1024, dynamic: true })})
        .setDescription(`${maxTracks.map((track, i) => `**${i + 1}**. ${track.title} | ${track.author}`).join('\n')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä –º–µ–∂–¥—É **1** –∏ **${maxTracks.length}** –∏–ª–∏ **–æ—Ç–º–µ–Ω–∞** ‚¨áÔ∏è`)
        .setTimestamp()
        .setFooter({ text: '–ú—É–∑—ã–∫–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ - –°–¥–µ–ª–∞–Ω–æ —Å –¥—É—à–æ–π –æ—Ç –ê–≥–µ–Ω—Ç#0707 ‚ù§Ô∏è', iconURL: inter.member.avatarURL({ dynamic: true })})

        inter.reply({ embeds: [embed] });

        const collector = inter.channel.createMessageCollector({
            time: 15000,
            max: 1,
            errors: ['time'],
            filter: m => m.author.id === inter.member.id
        });

        collector.on('collect', async (query) => {
            if (query.content.toLowerCase() === 'cancel') return inter.followUp({ content: `–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω ‚úÖ`, ephemeral: true }), collector.stop();

            const value = parseInt(query);
            if (!value || value <= 0 || value > maxTracks.length) return inter.followUp({ content: `Invalid response, try a value between **1** and **${maxTracks.length}** or **cancel**... try again ? ‚ùå`, ephemeral: true });

            collector.stop();

            try {
                if (!queue.connection) await queue.connect(inter.member.voice.channel);
            } catch {
                await player.deleteQueue(inter.guildId);
                return inter.followUp({ content: `–Ω–µ –º–æ–≥—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É ${inter.member}... –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É ? ‚ùå`, ephemeral: true });
            }

            await inter.followUp(`–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–µ–≥–æ –ø–æ–∏—Å–∫–∞... üéß`);

            queue.addTrack(res.tracks[query.content - 1]);

            if (!queue.playing) await queue.play();
        });

        collector.on('end', (msg, reason) => {
            if (reason === 'time') return inter.followUp({ content:`–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–æ ${inter.member}... –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É ? ‚ùå`, ephemeral: true })
        });
    },
};